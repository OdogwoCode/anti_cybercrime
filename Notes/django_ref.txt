
max_length=20 — States that the maximum length of a value in this field is 20 characters.

help_text='Enter field documentation' — 
    provides a text label to display to help users know what value
     to provide when this value is to be entered by a user via an HTML form.


Common field arguments
        The following common arguments can be used when declaring many/most of the different field types:

        help_text: Provides a text label for HTML forms (e.g. in the admin site), as described above.

        verbose_name: A human-readable name for the field used in field labels. 
            If not specified, Django will infer the default verbose name from the field name.

        default: The default value for the field. This can be a value or a callable object,
            in which case the object will be called every time a new record is created.

        null: If True, Django will store blank values as NULL in the database for fields 
            where this is appropriate (a CharField will instead store an empty string). The default is False.

        blank: If True, the field is allowed to be blank in your forms. The default is False,
            which means that Django's form validation will force you to enter a value. 
            This is often used with null=True , because if you're going to allow blank values, 
            you also want the database to be able to represent them appropriately.

        choices: A group of choices for this field. If this is provided, the default 
            corresponding form widget will be a select box with these choices instead of the standard text field.
        primary_key: If True, sets the current field as the primary key for the model 
            (A primary key is a special database column designated to uniquely identify 
            all the different table records). If no field is specified as the primary key 
            then Django will automatically add a field for this purpose.

Common field types
        The following list describes some of the more commonly used types of fields. 

        CharField is used to define short-to-mid sized fixed-length strings. You must specify the max_length of the data to be stored.
        TextField is used for large arbitrary-length strings. You may specify a max_length for the field, but this is used only when the field is displayed in forms (it is not enforced at the database level).
        IntegerField is a field for storing integer (whole number) values, and for validating entered values as integers in forms.
        DateField and DateTimeField are used for storing/representing dates and date/time information (as Python datetime.date in and datetime.datetime objects, respectively). These fields can additionally declare the (mutually exclusive) parameters auto_now=True (to set the field to the current date every time the model is saved), auto_now_add (to only set the date when the model is first created) , and default (to set a default date that can be overridden by the user).
        EmailField is used to store and validate email addresses.
        FileField and ImageField are used to upload files and images respectively (the ImageField simply adds additional validation that the uploaded file is an image). These have parameters to define how and where the uploaded files are stored.
        AutoField is a special type of IntegerField that automatically increments. A primary key of this type is automatically added to your model if you don’t explicitly specify one.
        ForeignKey is used to specify a one-to-many relationship to another database model (e.g. a car has one manufacturer, but a manufacturer can make many cars). The "one" side of the relationship is the model that contains the "key" (models containing a "foreign key" referring to that "key", are on the "many" side of such a relationship).
        ManyToManyField is used to specify a many-to-many relationship (e.g. a book can have several genres, and each genre can contain several books). In our library app we will use these very similarly to ForeignKeys, but they can be used in more complicated ways to describe the relationships between groups. These have the parameter on_delete to define what happens when the associated record is deleted (e.g. a value of models.SET_NULL would simply set the value to NULL).


BOOK INSTANCE
    BookInstance model
    Next, copy the BookInstance model (shown below) under the other models. 
    The BookInstance represents a specific copy of a book that someone might borrow, and 
    includes information about whether the copy is available or on what date it is expected back,
    "imprint" or version details, and a unique id for the book in the library.

    Some of the fields and methods will now be familiar. The model uses

    ForeignKey to identify the associated Book (each book can have many copies, but a copy can only have one Book).
    CharField to represent the imprint (specific release) of the book.


    We additionally declare a few new types of field:

    UUIDField is used for the id field to set it as the primary_key for this model. This type of field allocates a globally unique value for each instance (one for every book you can find in the library).
    DateField is used for the due_back date (at which the book is expected to become available after being borrowed or in maintenance). This value can be blank or null (needed for when the book is available). The model metadata (Class Meta) uses this field to order records when they are returned in a query.
    status is a CharField that defines a choice/selection list. As you can see, we define a tuple containing tuples of key-value pairs and pass it to the choices argument. The value in a key/value pair is a display value that a user can select, while the keys are the values that are actually saved if the option is selected. We've also set a default value of 'm' (maintenance) as books will initially be created unavailable before they are stocked on the shelves.
    The method __str__() represents the BookInstance object using a combination of its unique id and the associated Book's title.

    __________________________________________________
Object
        "object" (a group of related information). 
        In this case, the obvious objects are books, book instances, and authors.

DROP DOWN
        use models to represent selection-list options (e.g. like a drop down list of choices), rather than hard coding the choices into the website itself — 
        this is recommended when all the options aren't known up front or may change.

        Obvious candidates for models, in this case, include the book genre
         (e.g. Science Fiction, French Poetry, etc.) and language (English, French, Japanese).

RELATIONSHIPS 
        Once we've decided on our models and field, 
        we need to think about the relationships. 

        Django allows you to define relationships that are one to one (OneToOneField), 
        one to many (ForeignKey) and 
        many to many (ManyToManyField).

FIELDS
    A model can have an arbitrary number of fields, of any type — 
    each one represents a column of data that we want to store in one of our database tables. 
    Each database record (row) will consist of one of each field value. Let's look at the example seen below:

    my_field_name = models.CharField(max_length=20, help_text='Enter field documentation')

verbose
    No verbose name has been defined, so the field will be called Name in forms.MODEL Genre

models
    from django.db import models
from django.urls import reverse # Used to generate URLs by reversing the URL patterns
import uuid # Required for unique book instances


class Genre(models.Model):
    """Model representing a book genre (e.g. Science Fiction, Non Fiction)."""
    name = models.CharField(max_length=200, help_text="Enter a book genre (e.g. Science Fiction, French Poetry etc.)")
    
    def __str__(self):
        """String for representing the Model object."""
        return self.name
    


class Language(models.Model):
    """Model representing a Language (e.g. English, French, Japanese, etc.)"""
    name = models.CharField(max_length=200,
                            help_text="Enter the book's natural language (e.g. English, French, Japanese etc.)")

    def __str__(self):
        """String for representing the Model object (in Admin site etc.)"""
        return self.name



class Book(models.Model):
    """Model representing a book (but not a specific copy of a book)."""
    title = models.CharField(max_length=200)

    # Foreign Key used because book can only have one author, but authors can have multiple books
    # Author as a string rather than object because it hasn't been declared yet in the file
    author = models.ForeignKey('Author', on_delete=models.SET_NULL, null=True)
    
    summary = models.TextField(max_length=1000, help_text='Enter a brief description of the book')
    isbn = models.CharField('ISBN', max_length=13, help_text='13 Character <a href="https://www.isbn-international.org/content/what-isbn">ISBN number</a>')
    
    # ManyToManyField used because genre can contain many books. Books can cover many genres.
    # Genre class has already been defined so we can specify the object above.
    genre = models.ManyToManyField(Genre, help_text='Select a genre for this book')
    
    def __str__(self):
        """String for representing the Model object."""
        return self.title
    
    def get_absolute_url(self):
        """Returns the url to access a detail record for this book."""
        return reverse('book-detail', args=[str(self.id)])

class BookInstance(models.Model):
    """Model representing a specific copy of a book (i.e. that can be borrowed from the library)."""
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, help_text='Unique ID for this particular book across whole library')
    book = models.ForeignKey('Book', on_delete=models.SET_NULL, null=True) 
    imprint = models.CharField(max_length=200)
    due_back = models.DateField(null=True, blank=True)

    LOAN_STATUS = (
        ('m', 'Maintenance'),
        ('o', 'On loan'),
        ('a', 'Available'),
        ('r', 'Reserved'),
    )

    status = models.CharField(
        max_length=1,
        choices=LOAN_STATUS,
        blank=True,
        default='m',
        help_text='Book availability',
    )

    class Meta:
        ordering = ['due_back']

    def __str__(self):
        """String for representing the Model object."""
        return f'{self.id} ({self.book.title})'
    

class Author(models.Model):
    """Model representing an author."""
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    date_of_birth = models.DateField(null=True, blank=True)
    date_of_death = models.DateField('Died', null=True, blank=True)

    class Meta:
        ordering = ['last_name', 'first_name']

    def get_absolute_url(self):
        """Returns the url to access a particular author instance."""
        return reverse('author-detail', args=[str(self.id)])

    def __str__(self):
        """String for representing the Model object."""
        return f'{self.last_name}, {self.first_name}'